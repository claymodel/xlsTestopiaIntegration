package jp.elias.xls.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.AbstractList;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

import jp.elias.xls.csv.CSVMetaDataWriter;
import jp.elias.xls.csv.CSVPanelImageReader;
import jp.elias.xls.csv.CSVPanelImageWriter;
import jp.elias.xls.csv.CSVWriter;
import jp.elias.xls.csv.ColumnNotConfiguredException;
import jp.elias.xls.csv.PlanWriter;
import jp.elias.xls.csv.SQLWriter;
import jp.elias.xls.file.FileNameExtensionFilter;
import jp.elias.xls.sql.TableNotFoundException;
import jp.elias.xls.tns.TNSException;
import jp.elias.xls.tns.TNSNamesReader;

import jp.elias.xls.xls.xlsTestopiaIntegration;

public class FileChooserFrame extends javax.swing.JFrame implements ActionListener {

	/** Creates new form FileChooserFrame */
    public FileChooserFrame(
        Main main
        , int task // Possible inputs: APPEND_TNS, UPLOAD_CSV, SAVE_CSV, SAVE_DATA_COMPARISON, SAVE_SQL_INSERT, SAVE_SQL_MERGE, SAVE_IMAGE, UPLOAD_IMAGE, SAVE_PLAN, SAVE_METADATA
    ) {
        this.main = main;
        this.task = task;
        initFormTitle();            // Initialize Form Title based on the task value
        initComponents();
        initApproveButtonText();    // Initialize Approve Button text based on the task value
        initFilter();               // Initialize File Filter based on the task value
        initButtons();              // Add Action Listeners to Approve and Cancel Buttons

        if( task == SAVE_XLS || task == SAVE_CSV || task == SAVE_DATA_COMPARISON || task == SAVE_SQL_INSERT ||
                task == SAVE_SQL_MERGE || task == SAVE_IMAGE || task == SAVE_PLAN || task == SAVE_METADATA )
            initFileTextField();

        setLocation( main.getX() + 109, main.getY() + 101 ); // Locate this form at the center of Main Window
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setDialogType(javax.swing.JFileChooser.CUSTOM_DIALOG);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(fileChooser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(fileChooser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        if( task == SAVE_DATA_COMPARISON || task == SAVE_PLAN ) {
            main.planFrame.setEnabled( true );
            main.planFrame.requestFocus();
        }
        else {
            main.setEnabled( true );
            main.requestFocus();
        }
    }//GEN-LAST:event_formWindowClosed

    void disposeFileChooser() {
        if( task == SAVE_DATA_COMPARISON || task == SAVE_PLAN ) {
            main.planFrame.setEnabled( true );
            main.planFrame.requestFocus();
        }
        else {
            main.setEnabled( true );
            main.requestFocus();
        }

        dispose();
    }

    public File getFile() {
        String fileName = fileTextField.getText();

        //System.out.println("fileName : " + fileName);
        
        if( task == SAVE_CSV || task == SAVE_DATA_COMPARISON || task == SAVE_METADATA ) {
            if( fileName.endsWith( ".csv" ) || fileName.endsWith( ".CSV" ) )
                return new File( fileChooser.getCurrentDirectory(), fileName );
            else
                return new File( fileChooser.getCurrentDirectory(), fileName + ".csv" );
        }
        else if( task == SAVE_XLS || task == SAVE_DATA_COMPARISON || task == SAVE_METADATA ) {
            if( fileName.endsWith( ".xls" ) || fileName.endsWith( ".XLS" ) )
                return new File( fileChooser.getCurrentDirectory(), fileName );
            else
                return new File( fileChooser.getCurrentDirectory(), fileName + ".csv" );
        }

        else if( task == SAVE_SQL_INSERT || task == SAVE_SQL_MERGE ) {
            if( fileName.endsWith( ".sql" ) || fileName.endsWith( ".SQL" ) )
                return new File( fileChooser.getCurrentDirectory(), fileName );
            else
                return new File( fileChooser.getCurrentDirectory(), fileName + ".sql" );
        }
        else if( task == SAVE_IMAGE ) {
            if( fileName.endsWith( ".cfg" ) || fileName.endsWith( ".CFG" ) )
                return new File( fileChooser.getCurrentDirectory(), fileName );
            else
                return new File( fileChooser.getCurrentDirectory(), fileName + ".cfg" );
        }
        else {
            if( fileName.endsWith( ".pln" ) || fileName.endsWith( ".PLN" ) )
                return new File( fileChooser.getCurrentDirectory(), fileName );
            else
                return new File( fileChooser.getCurrentDirectory(), fileName + ".pln" );
        }
    }

    /* Initialize Approve Button text based on the task value */
    private void initApproveButtonText() {
        if( task == APPEND_TNS )
            fileChooser.setApproveButtonText( "Append" );
        else if( task == UPLOAD_TNS || task == UPLOAD_CSV || task == UPLOAD_IMAGE )
            fileChooser.setApproveButtonText( "Upload" );
        else
            fileChooser.setApproveButtonText( "Save" );
    }

    /* Add Action Listeners to Approve and Cancel Buttons */
    private void initButtons() {
        JPanel buttonPanel = (JPanel)( (JPanel)fileChooser.getComponent( 3 ) ).getComponent( 3 );
        approveButton = (JButton)buttonPanel.getComponent( 0 );
        cancelButton = (JButton)buttonPanel.getComponent( 1 );
        approveButton.addActionListener( this );
        cancelButton.addActionListener( this );
    }

    private void initFileTextField() {
        fileTextField = (JTextField)( (JPanel)( (JPanel)fileChooser.getComponent( 3 ) ).getComponent( 0 ) ).getComponent( 1 );
        //System.out.println("FILENAME : " + fileTextField);
    }

    /* Initialize File Filter based on the task value */
    private void initFilter() {
        FileNameExtensionFilter filter;

        if( task == UPLOAD_TNS || task == APPEND_TNS )
            filter = new FileNameExtensionFilter( "ORA Files", "ora" );
        else if( task == UPLOAD_CSV || task == SAVE_CSV || task == SAVE_DATA_COMPARISON ||
            task == SAVE_METADATA )
            filter = new FileNameExtensionFilter( "CSV Files", "csv" );
        else if( task == UPLOAD_XLS || task == SAVE_XLS || task == SAVE_DATA_COMPARISON ||
                task == SAVE_METADATA )
                filter = new FileNameExtensionFilter( "XLS Files", "xls" );
        else if( task == SAVE_SQL_INSERT || task == SAVE_SQL_MERGE )
            filter = new FileNameExtensionFilter( "SQL Files", "sql" );
        else if( task == UPLOAD_IMAGE || task == SAVE_IMAGE )
            filter = new FileNameExtensionFilter( "CSV Panel Image Config File", "cfg" );
        else
            filter = new FileNameExtensionFilter( "Insert Plan Report File", "pln" );

        fileChooser.setFileFilter( filter );
    }

    /* Initialize Form Title based on the task value */
    private void initFormTitle() {
        if( task == UPLOAD_TNS )
            setTitle( "Select the TNSNAMES.ORA to be Uploaded" );
        else if( task == APPEND_TNS )
            setTitle( "Select the TNSNAMES.ORA to be Appended" );
        else if( task == UPLOAD_CSV )
            setTitle( "Select the CSV File to be Converted to a SQL Insert Script" );
        else if( task == UPLOAD_XLS )
            setTitle( "Select the XLS File" );

        else if( task == SAVE_CSV )
            setTitle( "Choose the location to save your modified CSV File" );
        else if( task == SAVE_XLS )
            setTitle( "Choose the location to save your modified XLS File" );

        else if( task == SAVE_DATA_COMPARISON )
            setTitle( "Choose the location to save your Data Comparison" );
        else if( task == SAVE_SQL_INSERT )
            setTitle( "Choose the location to save your SQL Insert Script" );
        else if( task == SAVE_SQL_MERGE )
            setTitle( "Choose the location to save your SQL Insert Script" );
        else if( task == SAVE_IMAGE )
            setTitle( "Choose the location to save your CSV Panel Image Configuration File" );
        else if( task == UPLOAD_IMAGE )
            setTitle( "Select the CFG File to be Uploaded" );
        else if( task == SAVE_PLAN )
            setTitle( "Choose the location to save your Insert Plan Report File" );
        else
            setTitle( "Choose the location to save your Data Type & Length Report" );
    }

    public void actionPerformed( ActionEvent e ) {
        if( e.getSource() == approveButton ) {
            if( !approveButton.getText().equals( "Open" ) ) {
                if( task == UPLOAD_TNS ) {
                    try {
                        tnsNamesReader = new TNSNamesReader( main, fileChooser.getSelectedFile() ); // Digest selected ORA file
                        main.tnsPanel.setTNSTableContent( tnsNamesReader.getTNSVector() );          // Displays the TNS Configurations obtained from the ORA file

                        disposeFileChooser();
                    }
                    catch( FileNotFoundException fe ) {
                        JOptionPane.showMessageDialog( null, fe.getMessage(), "File Not Found", JOptionPane.ERROR_MESSAGE );
                    }
                    catch( IOException ie ) {
                        JOptionPane.showMessageDialog( null, ie.getMessage(), "I/O Error", JOptionPane.ERROR_MESSAGE );
                    }
                    catch( TNSException te ) {
                        main.fileChooser.setEnabled( false );
                        new TNSExceptionFrame( main ).setVisible( true );
                    }
                    catch( NullPointerException ne ) {} // Prevents Error Message when Approve Button is clicked without any file being selected
                }
                else if( task == APPEND_TNS ) {
                    try {
                        tnsNamesReader = new TNSNamesReader( main, fileChooser.getSelectedFile() ); // Digest selected ORA file
                        main.tnsPanel.appendTNSTableContent( tnsNamesReader.getTNSVector() );       // Displays the TNS Configurations obtained from the ORA file

                        disposeFileChooser();
                    }
                    catch( FileNotFoundException fe ) {
                        JOptionPane.showMessageDialog( null, fe.getMessage(), "File Not Found", JOptionPane.ERROR_MESSAGE );
                    }
                    catch( IOException ie ) {
                        JOptionPane.showMessageDialog( null, ie.getMessage(), "I/O Error", JOptionPane.ERROR_MESSAGE );
                    }
                    catch( TNSException te ) {
                        main.fileChooser.setEnabled( false );
                        new TNSExceptionFrame( main ).setVisible( true );
                    }
                    catch( NullPointerException ne ) {} // Prevents Error Message when Approve Button is clicked without any file being selected
                }
                else if( task == UPLOAD_XLS ) { // UPLOAD_CSV
                    setEnabled( false );
                    //HASNAT
        		   
        		    File selectedFile = fileChooser.getSelectedFile();
        		    
        		    String file = new String(selectedFile.getParent()+"/"+ selectedFile.getName());

        		    //System.out.println("file Name : "+file);
        		    //xlsTestopia obj = new xlsTestopia(file,main.host,
        		  		//  main.port,main.sid,main.user,main.password);
  
          		    
        		    //xlsTestopia obj = new xlsTestopia("test-hasnat.xls","localhost",
    		  		 // 3306,"bugzilla","root","hasnat123");

        		   
        		    String[] testStr = new String[6];
        		    testStr[0] = new String(file);
        		    testStr[1] = new String(main.host);
        		    testStr[2] = new String(Integer.toString(main.port));
        		    testStr[3] = new String(main.sid);
        		    testStr[4] = new String(main.user);
        		    testStr[5] = new String(main.password);
         		    
        		    /**
        		    JOptionPane.showMessageDialog(null, testStr[0] +"\n"+testStr[1] +"\n"+new Integer(testStr[2]) +
        		    		"\n"+testStr[3] +"\n"+testStr[4] +"\n"+testStr[5]);
        		    */
        		    
        		    //xlsTestopia obj = new xlsTestopia(testStr);
        		    xlsTestopiaIntegration obj = new xlsTestopiaIntegration(testStr);
                            disposeFileChooser();
        		    JOptionPane.showMessageDialog(null,"Data Uploaded in Testopia");
                            //String globalStr = obj.globalStr;
                            //System.out.println(globalStr.toString());
                }
                else if( task == UPLOAD_CSV ) { // UPLOAD_CSV
                    setEnabled( false );
                    new ColTitleFrame( main ).setVisible( true );
                }
                else if( task == SAVE_CSV || task == SAVE_DATA_COMPARISON ) {
                    setVisible( false );
                    int choice = JOptionPane.showConfirmDialog( null, "Do you want to include column titles?", "Column Titles", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE );

                    if( task == SAVE_CSV )
                        main.setTitle( "RNC Automation Tool - Loading..." );
                    else
                        main.planFrame.setTitle( "Plan - Loading..." );

                    AbstractList dataAbstractList;
                    AbstractList colTitleAbstractList;

                    /* Source Data: CSV Data Snapshot */
                    if( task == SAVE_CSV ) {
                        dataAbstractList = main.csvPanel.currentImage.csvDataArrayList;
                        colTitleAbstractList = main.csvPanel.currentImage.columnArrayList;
                    }

                    /* Source Data: Data Comparison */
                    else {
                        dataAbstractList = main.csvPanel.currentImage.plan.dataComparisonList;
                        colTitleAbstractList = main.csvPanel.currentImage.plan.columnTitleList;
                    }

                    if( choice == JOptionPane.YES_OPTION ) {
                        try {
                            new CSVWriter( main, true, dataAbstractList, colTitleAbstractList );
                        }
                        catch( IOException ie ) {
                            JOptionPane.showMessageDialog( null, ie.getMessage(), "I/O Error", JOptionPane.ERROR_MESSAGE );
                        }
                    }
                    else if( choice == JOptionPane.NO_OPTION ) {
                        try {
                            new CSVWriter( main, false, dataAbstractList, colTitleAbstractList );
                        }
                        catch( IOException ie ) {
                            JOptionPane.showMessageDialog( null, ie.getMessage(), "I/O Error", JOptionPane.ERROR_MESSAGE );
                        }
                    }

                    if( task == SAVE_CSV )
                        main.setTitle( "RNC Automation Tool" );
                    else
                        main.planFrame.setTitle( "Plan" );

                    disposeFileChooser();
                }
                else if( task == SAVE_SQL_INSERT ) {
                    setVisible( false );

                    main.setTitle( "RNC Automation Tool - Loading..." );

                    try {
                        new SQLWriter( main, SQLWriter.INSERT );
                    }
                    catch( ClassNotFoundException ce ) {
                        JOptionPane.showMessageDialog( null, ce.getMessage(), "JDBC Driver Error", JOptionPane.ERROR_MESSAGE );
                    }
                    catch( ColumnNotConfiguredException colE ) {
                        JOptionPane.showMessageDialog( null, colE.getMessage(), "Column Config Error", JOptionPane.ERROR_MESSAGE );
                    }
                    catch( IOException ie ) {
                        JOptionPane.showMessageDialog( null, ie.getMessage(), "I/O Error", JOptionPane.ERROR_MESSAGE );
                    }
                    catch( SQLException se ) {
                        JOptionPane.showMessageDialog( null, se.getMessage(), "SQL Error", JOptionPane.ERROR_MESSAGE );
                    }
                    catch( TableNotFoundException te ) {
                        JOptionPane.showMessageDialog( null, te.getMessage(), "Table Not Found", JOptionPane.ERROR_MESSAGE );
                    }

                    main.setTitle( "RNC Automation Tool" );

                    disposeFileChooser();
                }
                else if( task == SAVE_SQL_MERGE ) {
                    setVisible( false );

                    main.setTitle( "RNC Automation Tool - Loading..." );

                    try {
                        new SQLWriter( main, SQLWriter.MERGE );
                    }
                    catch( ClassNotFoundException ce ) {
                        JOptionPane.showMessageDialog( null, ce.getMessage(), "JDBC Driver Error", JOptionPane.ERROR_MESSAGE );
                    }
                    catch( ColumnNotConfiguredException colE ) {
                        JOptionPane.showMessageDialog( null, colE.getMessage(), "Column Config Error", JOptionPane.ERROR_MESSAGE );
                    }
                    catch( IOException ie ) {
                        JOptionPane.showMessageDialog( null, ie.getMessage(), "I/O Error", JOptionPane.ERROR_MESSAGE );
                    }
                    catch( SQLException se ) {
                        JOptionPane.showMessageDialog( null, se.getMessage(), "SQL Error", JOptionPane.ERROR_MESSAGE );
                    }
                    catch( TableNotFoundException te ) {
                        JOptionPane.showMessageDialog( null, te.getMessage(), "Table Not Found", JOptionPane.ERROR_MESSAGE );
                    }

                    main.setTitle( "RNC Automation Tool" );

                    disposeFileChooser();
                }
                else if( task == SAVE_IMAGE ) {
                    try {
                        new CSVPanelImageWriter( main );
                    }
                    catch( IOException ie ) {
                        JOptionPane.showMessageDialog( null, ie.getMessage(), "I/O Error", JOptionPane.ERROR_MESSAGE );
                    }

                    disposeFileChooser();
                }
                else if( task == UPLOAD_IMAGE ) {
                    try {
                        CSVPanelImageReader imageReader = new CSVPanelImageReader( main );

                        int csvLoaderColCount = main.csvPanel.currentImage.sqlArrayList.size();
                        int imageReaderColCount = imageReader.sqlArrayList.size();

                        if( csvLoaderColCount == imageReaderColCount ) {
                            main.csvPanel.currentImage.sqlArrayList = new ArrayList<ArrayList<String>>( imageReader.sqlArrayList );
                            main.csvPanel.currentImage.includeArrayList = new ArrayList<Boolean>( imageReader.includeArrayList );
                            main.csvPanel.reloadCol();
                        }
                        else {
                            JOptionPane.showMessageDialog( null, "CSV Loader=" + csvLoaderColCount + " Configuration=" + imageReaderColCount, "Column Count Mismatch", JOptionPane.ERROR_MESSAGE );
                        }
                    }
                    catch( FileNotFoundException fe ) {
                        JOptionPane.showMessageDialog( null, fe.getMessage(), "File Not Found", JOptionPane.ERROR_MESSAGE );
                    }
                    catch( IOException ie ) {
                        JOptionPane.showMessageDialog( null, ie.getMessage(), "I/O Error", JOptionPane.ERROR_MESSAGE );
                    }

                    disposeFileChooser();
                }
                else if( task == SAVE_PLAN ) {
                    setVisible( false );

                    main.setTitle( "RNC Automation Tool - Loading..." );

                    try {
                        new PlanWriter( main );
                    }
                    catch( IOException ie ) {
                        JOptionPane.showMessageDialog( null, ie.getMessage(), "I/O Error", JOptionPane.ERROR_MESSAGE );
                    }
                    catch( SQLException se ) {
                        JOptionPane.showMessageDialog( null, se.getMessage(), "SQL Error", JOptionPane.ERROR_MESSAGE );
                    }

                    main.setTitle( "RNC Automation Tool" );

                    disposeFileChooser();
                }
                else {
                    setVisible( false );
                    main.setTitle( "RNC Automation Tool - Loading..." );

                    try {
                        new CSVMetaDataWriter( main );
                    }
                    catch( IOException ie ) {
                        JOptionPane.showMessageDialog( null, ie.getMessage(), "I/O Error", JOptionPane.ERROR_MESSAGE );
                    }

                    main.setTitle( "RNC Automation Tool" );

                    disposeFileChooser();
                }
            }
        }
        else {
            disposeFileChooser();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JFileChooser fileChooser;
    // End of variables declaration//GEN-END:variables

    private int task;
    private JButton approveButton;
    private JButton cancelButton;
    private JTextField fileTextField;
    private Main main;
    public TNSNamesReader tnsNamesReader;
    static final int UPLOAD_TNS = 0;
    static final int APPEND_TNS = 1;
    static final int UPLOAD_CSV = 2;
    public static final int SAVE_CSV = 3;
    public static final int SAVE_DATA_COMPARISON = 4;
    public static final int SAVE_SQL_INSERT = 5;
    public static final int SAVE_SQL_MERGE = 6;
    public static final int SAVE_IMAGE = 7;
    static final int UPLOAD_IMAGE = 8;
    public static final int SAVE_PLAN = 9;
    public static final int SAVE_METADATA = 10;
    static final int UPLOAD_XLS = 222;
    static final int SAVE_XLS = 333;
}
